[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:[m[K In function â€˜[01m[Kvoid cloud_cb(const PointCloud2ConstPtr&)[m[Kâ€™:
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:24:46:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kpcl::PassThrough<pcl::PointXYZ>::setInputCloud(const PointCloud2ConstPtr&)[m[Kâ€™
     p_filter.setInputCloud (downsampled_cloud); // Pass downsampled_cloud to the filter
[01;32m[K                                              ^[m[K
In file included from [01m[K/usr/include/pcl-1.7/pcl/common/io.h:45:0[m[K,
                 from [01m[K/usr/include/pcl-1.7/pcl/io/file_io.h:42[m[K,
                 from [01m[K/usr/include/pcl-1.7/pcl/io/pcd_io.h:44[m[K,
                 from [01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:70[m[K,
                 from [01m[K/opt/ros/kinetic/include/pcl_ros/point_cloud.h:9[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:6[m[K:
[01m[K/usr/include/pcl-1.7/pcl/pcl_base.h:95:7:[m[K [01;36m[Knote: [m[Kcandidate: void pcl::PCLBase<PointT>::setInputCloud(const PointCloudConstPtr&) [with PointT = pcl::PointXYZ; pcl::PCLBase<PointT>::PointCloudConstPtr = boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >]
       setInputCloud (const PointCloudConstPtr &cloud);
[01;32m[K       ^[m[K
[01m[K/usr/include/pcl-1.7/pcl/pcl_base.h:95:7:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kconst PointCloud2ConstPtr {aka const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >}[m[Kâ€™ to â€˜[01m[Kconst PointCloudConstPtr& {aka const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >&}[m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:27:35:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kpcl::PassThrough<pcl::PointXYZ>::filter(pcl::PCLPointCloud2&)[m[Kâ€™
     p_filter.filter (*passed_cloud); // Store output data in passed_cloud
[01;32m[K                                   ^[m[K
In file included from [01m[K/usr/include/pcl-1.7/pcl/filters/passthrough.h:43:0[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:8[m[K:
[01m[K/usr/include/pcl-1.7/pcl/filters/filter_indices.h:103:7:[m[K [01;36m[Knote: [m[Kcandidate: void pcl::FilterIndices<PointT>::filter(pcl::FilterIndices<PointT>::PointCloud&) [with PointT = pcl::PointXYZ; pcl::FilterIndices<PointT>::PointCloud = pcl::PointCloud<pcl::PointXYZ>]
       filter (PointCloud &output)
[01;32m[K       ^[m[K
[01m[K/usr/include/pcl-1.7/pcl/filters/filter_indices.h:103:7:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PCLPointCloud2[m[Kâ€™ to â€˜[01m[Kpcl::FilterIndices<pcl::PointXYZ>::PointCloud& {aka pcl::PointCloud<pcl::PointXYZ>&}[m[Kâ€™
[01m[K/usr/include/pcl-1.7/pcl/filters/filter_indices.h:112:7:[m[K [01;36m[Knote: [m[Kcandidate: void pcl::FilterIndices<PointT>::filter(std::vector<int>&) [with PointT = pcl::PointXYZ]
       filter (std::vector<int> &indices)
[01;32m[K       ^[m[K
[01m[K/usr/include/pcl-1.7/pcl/filters/filter_indices.h:112:7:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PCLPointCloud2[m[Kâ€™ to â€˜[01m[Kstd::vector<int>&[m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:[m[K At global scope:
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:31:5:[m[K [01;35m[Kwarning: [m[Ksecond argument of â€˜[01m[Kint main(int, char***)[m[Kâ€™ should be â€˜[01m[Kchar **[m[Kâ€™ [-Wmain]
 int main(int argc, char** argv[])
[01;32m[K     ^[m[K
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:[m[K In function â€˜[01m[Kint main(int, char***)[m[Kâ€™:
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:34:47:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kinit(int&, char***&, const char [19])[m[Kâ€™
     ros::init(argc, argv, "passthrough_filter");
[01;32m[K                                               ^[m[K
In file included from [01m[K/opt/ros/kinetic/include/ros/node_handle.h:47:0[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:45[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:4[m[K:
[01m[K/opt/ros/kinetic/include/ros/init.h:83:18:[m[K [01;36m[Knote: [m[Kcandidate: void ros::init(int&, char**, const string&, uint32_t)
 ROSCPP_DECL void init(int &argc, char **argv, const std::string& name, uint32_t options = 0);
[01;32m[K                  ^[m[K
[01m[K/opt/ros/kinetic/include/ros/init.h:83:18:[m[K [01;36m[Knote: [m[K  no known conversion for argument 2 from â€˜[01m[Kchar***[m[Kâ€™ to â€˜[01m[Kchar**[m[Kâ€™
In file included from [01m[K/opt/ros/kinetic/include/ros/node_handle.h:47:0[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:45[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:4[m[K:
[01m[K/opt/ros/kinetic/include/ros/init.h:93:18:[m[K [01;36m[Knote: [m[Kcandidate: void ros::init(const M_string&, const string&, uint32_t)
 ROSCPP_DECL void init(const M_string& remappings, const std::string& name, uint32_t options = 0);
[01;32m[K                  ^[m[K
[01m[K/opt/ros/kinetic/include/ros/init.h:93:18:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst M_string& {aka const std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >&}[m[Kâ€™
[01m[K/opt/ros/kinetic/include/ros/init.h:103:18:[m[K [01;36m[Knote: [m[Kcandidate: void ros::init(const VP_string&, const string&, uint32_t)
 ROSCPP_DECL void init(const VP_string& remapping_args, const std::string& name, uint32_t options = 0);
[01;32m[K                  ^[m[K
[01m[K/opt/ros/kinetic/include/ros/init.h:103:18:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst VP_string& {aka const std::vector<std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >&}[m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:44:17:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kpassed_cloud[m[Kâ€™ was not declared in this scope
     pub.publish(passed_cloud); // Publish passed_cloud to the /cloud_passed topic
[01;32m[K                 ^[m[K
In file included from [01m[K/usr/include/boost/function/detail/maybe_include.hpp:18:0[m[K,
                 from [01m[K/usr/include/boost/function/detail/function_iterate.hpp:14[m[K,
                 from [01m[K/usr/include/boost/preprocessor/iteration/detail/iter/forward1.hpp:52[m[K,
                 from [01m[K/usr/include/boost/function.hpp:64[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/forwards.h:40[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/common.h:37[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:43[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:4[m[K:
/usr/include/boost/function/function_template.hpp: In instantiation of â€˜[01m[Kstatic void boost::detail::function::void_function_invoker1<FunctionPtr, R, T0>::invoke(boost::detail::function::function_buffer&, T0) [with FunctionPtr = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&][m[Kâ€™:
[01m[K/usr/include/boost/function/function_template.hpp:940:38:[m[K   required from â€˜[01m[Kvoid boost::function1<R, T1>::assign_to(Functor) [with Functor = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&][m[Kâ€™
[01m[K/usr/include/boost/function/function_template.hpp:728:7:[m[K   required from â€˜[01m[Kboost::function1<R, T1>::function1(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int][m[Kâ€™
[01m[K/usr/include/boost/function/function_template.hpp:1077:16:[m[K   required from â€˜[01m[Kboost::function<R(T0)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int][m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/passthrough_filter.cpp:42:77:[m[K   required from here
[01m[K/usr/include/boost/function/function_template.hpp:118:11:[m[K [01;31m[Kerror: [m[Kinvalid initialization of reference of type â€˜[01m[Kconst boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&[m[Kâ€™ from expression of type â€˜[01m[Kconst boost::shared_ptr<const pcl::PCLPointCloud2>[m[Kâ€™
           BOOST_FUNCTION_RETURN(f(BOOST_FUNCTION_ARGS));
[01;32m[K           ^[m[K
make[2]: *** [CMakeFiles/passthrough_filter.dir/src/passthrough_filter.cpp.o] Error 1
make[1]: *** [CMakeFiles/passthrough_filter.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:[m[K In function â€˜[01m[Kvoid cloud_cb(const PointCloud2ConstPtr&)[m[Kâ€™:
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:24:38:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kpcl::VoxelGrid<pcl::PCLPointCloud2>::setInputCloud(const PointCloud2ConstPtr&)[m[Kâ€™
     v_filter.setInputCloud (raw_cloud); // Pass raw_cloud to the filter
[01;32m[K                                      ^[m[K
In file included from [01m[K/usr/include/pcl-1.7/pcl/common/io.h:45:0[m[K,
                 from [01m[K/usr/include/pcl-1.7/pcl/io/file_io.h:42[m[K,
                 from [01m[K/usr/include/pcl-1.7/pcl/io/pcd_io.h:44[m[K,
                 from [01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:70[m[K,
                 from [01m[K/opt/ros/kinetic/include/pcl_ros/point_cloud.h:9[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:6[m[K:
[01m[K/usr/include/pcl-1.7/pcl/pcl_base.h:208:7:[m[K [01;36m[Knote: [m[Kcandidate: void pcl::PCLBase<pcl::PCLPointCloud2>::setInputCloud(const PCLPointCloud2ConstPtr&)
       setInputCloud (const PCLPointCloud2ConstPtr &cloud);
[01;32m[K       ^[m[K
[01m[K/usr/include/pcl-1.7/pcl/pcl_base.h:208:7:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kconst PointCloud2ConstPtr {aka const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >}[m[Kâ€™ to â€˜[01m[Kconst PCLPointCloud2ConstPtr& {aka const boost::shared_ptr<const pcl::PCLPointCloud2>&}[m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:[m[K At global scope:
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:30:5:[m[K [01;35m[Kwarning: [m[Ksecond argument of â€˜[01m[Kint main(int, char***)[m[Kâ€™ should be â€˜[01m[Kchar **[m[Kâ€™ [-Wmain]
 int main(int argc, char** argv[])
[01;32m[K     ^[m[K
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:[m[K In function â€˜[01m[Kint main(int, char***)[m[Kâ€™:
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:33:41:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kinit(int&, char***&, const char [13])[m[Kâ€™
     ros::init(argc, argv, "volex_filter");
[01;32m[K                                         ^[m[K
In file included from [01m[K/opt/ros/kinetic/include/ros/node_handle.h:47:0[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:45[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:4[m[K:
[01m[K/opt/ros/kinetic/include/ros/init.h:83:18:[m[K [01;36m[Knote: [m[Kcandidate: void ros::init(int&, char**, const string&, uint32_t)
 ROSCPP_DECL void init(int &argc, char **argv, const std::string& name, uint32_t options = 0);
[01;32m[K                  ^[m[K
[01m[K/opt/ros/kinetic/include/ros/init.h:83:18:[m[K [01;36m[Knote: [m[K  no known conversion for argument 2 from â€˜[01m[Kchar***[m[Kâ€™ to â€˜[01m[Kchar**[m[Kâ€™
In file included from [01m[K/opt/ros/kinetic/include/ros/node_handle.h:47:0[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:45[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:4[m[K:
[01m[K/opt/ros/kinetic/include/ros/init.h:93:18:[m[K [01;36m[Knote: [m[Kcandidate: void ros::init(const M_string&, const string&, uint32_t)
 ROSCPP_DECL void init(const M_string& remappings, const std::string& name, uint32_t options = 0);
[01;32m[K                  ^[m[K
[01m[K/opt/ros/kinetic/include/ros/init.h:93:18:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst M_string& {aka const std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >&}[m[Kâ€™
[01m[K/opt/ros/kinetic/include/ros/init.h:103:18:[m[K [01;36m[Knote: [m[Kcandidate: void ros::init(const VP_string&, const string&, uint32_t)
 ROSCPP_DECL void init(const VP_string& remapping_args, const std::string& name, uint32_t options = 0);
[01;32m[K                  ^[m[K
[01m[K/opt/ros/kinetic/include/ros/init.h:103:18:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst VP_string& {aka const std::vector<std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >&}[m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:43:17:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kdownsampled_cloud[m[Kâ€™ was not declared in this scope
     pub.publish(downsampled_cloud); // Publish downsampled_cloud to the /cloud_downsampled topic
[01;32m[K                 ^[m[K
In file included from [01m[K/usr/include/boost/function/detail/maybe_include.hpp:18:0[m[K,
                 from [01m[K/usr/include/boost/function/detail/function_iterate.hpp:14[m[K,
                 from [01m[K/usr/include/boost/preprocessor/iteration/detail/iter/forward1.hpp:52[m[K,
                 from [01m[K/usr/include/boost/function.hpp:64[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/forwards.h:40[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/common.h:37[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:43[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:4[m[K:
/usr/include/boost/function/function_template.hpp: In instantiation of â€˜[01m[Kstatic void boost::detail::function::void_function_invoker1<FunctionPtr, R, T0>::invoke(boost::detail::function::function_buffer&, T0) [with FunctionPtr = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&][m[Kâ€™:
[01m[K/usr/include/boost/function/function_template.hpp:940:38:[m[K   required from â€˜[01m[Kvoid boost::function1<R, T1>::assign_to(Functor) [with Functor = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&][m[Kâ€™
[01m[K/usr/include/boost/function/function_template.hpp:728:7:[m[K   required from â€˜[01m[Kboost::function1<R, T1>::function1(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int][m[Kâ€™
[01m[K/usr/include/boost/function/function_template.hpp:1077:16:[m[K   required from â€˜[01m[Kboost::function<R(T0)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int][m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/volex_filter.cpp:41:92:[m[K   required from here
[01m[K/usr/include/boost/function/function_template.hpp:118:11:[m[K [01;31m[Kerror: [m[Kinvalid initialization of reference of type â€˜[01m[Kconst boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&[m[Kâ€™ from expression of type â€˜[01m[Kconst boost::shared_ptr<const pcl::PCLPointCloud2>[m[Kâ€™
           BOOST_FUNCTION_RETURN(f(BOOST_FUNCTION_ARGS));
[01;32m[K           ^[m[K
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:[m[K In function â€˜[01m[Kvoid cloud_cb(const PointCloud2ConstPtr&)[m[Kâ€™:
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:24:41:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kpcl::StatisticalOutlierRemoval<pcl::PointXYZ>::setInputCloud(const PointCloud2ConstPtr&)[m[Kâ€™
     s_filter.setInputCloud (passed_cloud); // Pass passed_cloud to the filter
[01;32m[K                                         ^[m[K
In file included from [01m[K/usr/include/pcl-1.7/pcl/common/io.h:45:0[m[K,
                 from [01m[K/usr/include/pcl-1.7/pcl/io/file_io.h:42[m[K,
                 from [01m[K/usr/include/pcl-1.7/pcl/io/pcd_io.h:44[m[K,
                 from [01m[K/opt/ros/kinetic/include/pcl_conversions/pcl_conversions.h:70[m[K,
                 from [01m[K/opt/ros/kinetic/include/pcl_ros/point_cloud.h:9[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:6[m[K:
[01m[K/usr/include/pcl-1.7/pcl/pcl_base.h:95:7:[m[K [01;36m[Knote: [m[Kcandidate: void pcl::PCLBase<PointT>::setInputCloud(const PointCloudConstPtr&) [with PointT = pcl::PointXYZ; pcl::PCLBase<PointT>::PointCloudConstPtr = boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >]
       setInputCloud (const PointCloudConstPtr &cloud);
[01;32m[K       ^[m[K
[01m[K/usr/include/pcl-1.7/pcl/pcl_base.h:95:7:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kconst PointCloud2ConstPtr {aka const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >}[m[Kâ€™ to â€˜[01m[Kconst PointCloudConstPtr& {aka const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >&}[m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:27:36:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kpcl::StatisticalOutlierRemoval<pcl::PointXYZ>::filter(pcl::PCLPointCloud2&)[m[Kâ€™
     s_filter.filter (*cleaned_cloud); // Store output data in cleaned_cloud
[01;32m[K                                    ^[m[K
In file included from [01m[K/usr/include/pcl-1.7/pcl/filters/statistical_outlier_removal.h:43:0[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:8[m[K:
[01m[K/usr/include/pcl-1.7/pcl/filters/filter_indices.h:103:7:[m[K [01;36m[Knote: [m[Kcandidate: void pcl::FilterIndices<PointT>::filter(pcl::FilterIndices<PointT>::PointCloud&) [with PointT = pcl::PointXYZ; pcl::FilterIndices<PointT>::PointCloud = pcl::PointCloud<pcl::PointXYZ>]
       filter (PointCloud &output)
[01;32m[K       ^[m[K
[01m[K/usr/include/pcl-1.7/pcl/filters/filter_indices.h:103:7:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PCLPointCloud2[m[Kâ€™ to â€˜[01m[Kpcl::FilterIndices<pcl::PointXYZ>::PointCloud& {aka pcl::PointCloud<pcl::PointXYZ>&}[m[Kâ€™
[01m[K/usr/include/pcl-1.7/pcl/filters/filter_indices.h:112:7:[m[K [01;36m[Knote: [m[Kcandidate: void pcl::FilterIndices<PointT>::filter(std::vector<int>&) [with PointT = pcl::PointXYZ]
       filter (std::vector<int> &indices)
[01;32m[K       ^[m[K
[01m[K/usr/include/pcl-1.7/pcl/filters/filter_indices.h:112:7:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kpcl::PCLPointCloud2[m[Kâ€™ to â€˜[01m[Kstd::vector<int>&[m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:[m[K At global scope:
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:31:5:[m[K [01;35m[Kwarning: [m[Ksecond argument of â€˜[01m[Kint main(int, char***)[m[Kâ€™ should be â€˜[01m[Kchar **[m[Kâ€™ [-Wmain]
 int main(int argc, char** argv[])
[01;32m[K     ^[m[K
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:[m[K In function â€˜[01m[Kint main(int, char***)[m[Kâ€™:
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:34:48:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kinit(int&, char***&, const char [20])[m[Kâ€™
     ros::init(argc, argv, "statistical_removal");
[01;32m[K                                                ^[m[K
In file included from [01m[K/opt/ros/kinetic/include/ros/node_handle.h:47:0[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:45[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:4[m[K:
[01m[K/opt/ros/kinetic/include/ros/init.h:83:18:[m[K [01;36m[Knote: [m[Kcandidate: void ros::init(int&, char**, const string&, uint32_t)
 ROSCPP_DECL void init(int &argc, char **argv, const std::string& name, uint32_t options = 0);
[01;32m[K                  ^[m[K
[01m[K/opt/ros/kinetic/include/ros/init.h:83:18:[m[K [01;36m[Knote: [m[K  no known conversion for argument 2 from â€˜[01m[Kchar***[m[Kâ€™ to â€˜[01m[Kchar**[m[Kâ€™
In file included from [01m[K/opt/ros/kinetic/include/ros/node_handle.h:47:0[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:45[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:4[m[K:
[01m[K/opt/ros/kinetic/include/ros/init.h:93:18:[m[K [01;36m[Knote: [m[Kcandidate: void ros::init(const M_string&, const string&, uint32_t)
 ROSCPP_DECL void init(const M_string& remappings, const std::string& name, uint32_t options = 0);
[01;32m[K                  ^[m[K
[01m[K/opt/ros/kinetic/include/ros/init.h:93:18:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst M_string& {aka const std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >&}[m[Kâ€™
[01m[K/opt/ros/kinetic/include/ros/init.h:103:18:[m[K [01;36m[Knote: [m[Kcandidate: void ros::init(const VP_string&, const string&, uint32_t)
 ROSCPP_DECL void init(const VP_string& remapping_args, const std::string& name, uint32_t options = 0);
[01;32m[K                  ^[m[K
[01m[K/opt/ros/kinetic/include/ros/init.h:103:18:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kint[m[Kâ€™ to â€˜[01m[Kconst VP_string& {aka const std::vector<std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >&}[m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:44:17:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kcleaned_cloud[m[Kâ€™ was not declared in this scope
     pub.publish(cleaned_cloud); // Publish cleaned_cloud to the /cloud_cleaned topic
[01;32m[K                 ^[m[K
make[2]: *** [CMakeFiles/volex_filter.dir/src/volex_filter.cpp.o] Error 1
make[1]: *** [CMakeFiles/volex_filter.dir/all] Error 2
In file included from [01m[K/usr/include/boost/function/detail/maybe_include.hpp:18:0[m[K,
                 from [01m[K/usr/include/boost/function/detail/function_iterate.hpp:14[m[K,
                 from [01m[K/usr/include/boost/preprocessor/iteration/detail/iter/forward1.hpp:52[m[K,
                 from [01m[K/usr/include/boost/function.hpp:64[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/forwards.h:40[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/common.h:37[m[K,
                 from [01m[K/opt/ros/kinetic/include/ros/ros.h:43[m[K,
                 from [01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:4[m[K:
/usr/include/boost/function/function_template.hpp: In instantiation of â€˜[01m[Kstatic void boost::detail::function::void_function_invoker1<FunctionPtr, R, T0>::invoke(boost::detail::function::function_buffer&, T0) [with FunctionPtr = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&][m[Kâ€™:
[01m[K/usr/include/boost/function/function_template.hpp:940:38:[m[K   required from â€˜[01m[Kvoid boost::function1<R, T1>::assign_to(Functor) [with Functor = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&][m[Kâ€™
[01m[K/usr/include/boost/function/function_template.hpp:728:7:[m[K   required from â€˜[01m[Kboost::function1<R, T1>::function1(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int][m[Kâ€™
[01m[K/usr/include/boost/function/function_template.hpp:1077:16:[m[K   required from â€˜[01m[Kboost::function<R(T0)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = void (*)(const boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&); R = void; T0 = const boost::shared_ptr<const pcl::PCLPointCloud2>&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int][m[Kâ€™
[01m[K/home/enes/GitHub/zed_filtering/src/filters/src/statistical_removal.cpp:42:72:[m[K   required from here
[01m[K/usr/include/boost/function/function_template.hpp:118:11:[m[K [01;31m[Kerror: [m[Kinvalid initialization of reference of type â€˜[01m[Kconst boost::shared_ptr<const sensor_msgs::PointCloud2_<std::allocator<void> > >&[m[Kâ€™ from expression of type â€˜[01m[Kconst boost::shared_ptr<const pcl::PCLPointCloud2>[m[Kâ€™
           BOOST_FUNCTION_RETURN(f(BOOST_FUNCTION_ARGS));
[01;32m[K           ^[m[K
make[2]: *** [CMakeFiles/statistical_removal.dir/src/statistical_removal.cpp.o] Error 1
make[1]: *** [CMakeFiles/statistical_removal.dir/all] Error 2
make: *** [all] Error 2
